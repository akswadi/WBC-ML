import scipy.ndimage 
import numpy as np 
import matplotlib.pyplot as plt 
from scipy import misc 
import tensorflow as tf
# Read the image 
image_path ='BloodImage_00000.jpg'
image = tf.io.read_file(image_path)
image = tf.image.decode_jpeg(image)
  
# Convert the image to grayscale 
image = np.mean(image, axis=2) 
  
# Threshold the image to create a binary image 
threshold = 190
binary_image = image > threshold 
  
# Create a structuring element for the closing operation 
structuring_element = np.ones((10, 10), dtype=np.bool_) 
  
# Apply morphological closing to the binary image 
closed_image = scipy.ndimage.morphology.binary_closing(binary_image, structure=structuring_element) 
  
# Apply morphological opening to the binary image 
opened_image = scipy.ndimage.morphology.binary_opening(binary_image, structure=structuring_element) 
  
# Apply morphological binary erosion to the binary image 
binary_erosion_image = scipy.ndimage.morphology.binary_erosion(binary_image, structure=structuring_element) 
  
# Apply morphological binary dilation to the binary image 
binary_dilation_image = scipy.ndimage.morphology.binary_dilation(binary_image, structure=structuring_element) 
  
# Apply morphological binary fill holes to the binary image 
binary_fill_holes = scipy.ndimage.binary_fill_holes(binary_image, structure=structuring_element) 
  
# Initialise the subplot function using number of rows and columns 
figure, axis = plt.subplots(3, 2, figsize = (8,8)) 
  
# original image 
axis[0, 0].imshow(image) 
axis[0, 0].set_title("Original Image") 
axis[0, 0].axis('off') 
  
# closed_image 
axis[0, 1].imshow(closed_image) 
axis[0, 1].set_title("Binary closed image") 
axis[0, 1].axis('off') 
  
# Opened Image 
axis[1, 0].imshow(opened_image) 
axis[1, 0].set_title("Binary Opened Image") 
axis[1, 0].axis('off') 
  
# Erosion image 
axis[1, 1].imshow(binary_erosion_image) 
axis[1, 1].set_title("Erosion image") 
axis[1, 1].axis('off') 
  
# Dilation image 
axis[2, 1].imshow(binary_dilation_image) 
axis[2, 1].set_title("Dilation image") 
axis[2, 1].axis('off') 
  
# Fill holes  
axis[2, 0].imshow(binary_fill_holes ) 
axis[2, 0].set_title("Fill holes") 
axis[2, 0].axis('off') 
  
plt.show()

n = 10
l = 256
im = np.zeros((l, l))
np.random.seed(1)
points = l*np.random.random((2, n**2))
im[(points[0]).astype(np.int), (points[1]).astype(np.int)] = 1
im = image.gaussian_filter(im, sigma=l/(4.*n))

mask = (im > im.mean()).astype(np.float)
mask += 0.1 * im
img = mask + 0.2*np.random.randn(*mask.shape)

hist, bin_edges = np.histogram(img, bins=60)
bin_centers = 0.5*(bin_edges[:-1] + bin_edges[1:])

binary_img = img > 0.5