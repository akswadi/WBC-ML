import os
import numpy as np
from skimage import io, color
from skimage.measure import label, regionprops
import matplotlib.pyplot as plt

def process_and_save_image(img_path, min_area_threshold, save_folder):
    img = io.imread(img_path)
    img_hsv = color.rgb2hsv(img)
    hsv_lower = np.array([250/360, 0.0825, 0.61])
    hsv_upper = np.array([315/360, 0.850, 0.64])
    purple_mask_hsv = np.all((img_hsv >= hsv_lower) & (img_hsv <= hsv_upper), axis=-1)
    labeled_mask = label(purple_mask_hsv)
    regions = regionprops(labeled_mask)
    filtered_regions = [region for region in regions if region.area >= min_area_threshold]
    filtered_mask = np.zeros_like(purple_mask_hsv, dtype=bool)
    for region in filtered_regions:
        filtered_mask[labeled_mask == region.label] = True
    purple_area = np.sum(filtered_mask)
    img_name = os.path.basename(img_path)
    save_path = os.path.join(save_folder, img_name)
    io.imsave(save_path, filtered_mask.astype(np.uint8) * 255)
    return purple_area

input_folder = 'Images_2'
output_folder = 'Results_2'
min_area_threshold = 7000

if not os.path.exists(output_folder):
    os.makedirs(output_folder)

for filename in os.listdir(input_folder):
    if filename.endswith(('.jpg', '.png', '.jpeg')):
        img_path = os.path.join(input_folder, filename)
        purple_area = process_and_save_image(img_path, min_area_threshold, output_folder)
        print(f"Processed {filename}: Purple area = {purple_area} pixels")